git push -u origin master
library(anaval)
anaval::hello()
library(anaval)
devtools::test()
installpackage('devtools')
install.packages('devtools')
devtools::use_testthat()
library(anaval)
linear_link(0,2,4)
devtools::document()
library(anaval)
?linear_link
devtools::test()
library(anaval)
devtools::test()
devtools::document()
?simulation
?simulation
library(anaval)
devtools::document()
devtools::document()
library(anaval)
?norm_lin_dataset_sim
devtools::document()
library(anaval)
devtools::document()
devtools::test()
library(anaval)
devtools::test()
devtools::document()
devtoos::use_data()
devtools::use_data()
ref_calib_doe = calib_doe(nRun = 2, nCalibCurvesPerRun = 3, nrepCalib = 5, ConcVect = c(0,50, 100, 125, 150, 175, 200))
devtools::use_data(ref_calib_doe)
ref_calib_doe
class(ref_calib_doe)
dim(ref_calib_doe)
ref_calib_doe[1,]
class(1)
devtools::document()
?ref_calib_doe
devtools::test()
context("calibration")
test_that("DOE output is a data.frame", {
expect_is(calib_doe(nRun = 3, nCalibCurvesPerRun = 2, nrepCalib = 3, ConcVect = c(0, 50, 100, 125,
150, 175, 200)), "data.frame")
})
test_that("DOE data.frame has the right number of rows", {
expect_equal(dim(calib_doe(nRun = 3, nCalibCurvesPerRun = 1, nrepCalib = 1, ConcVect = c(0)))[1],
3)
expect_equal(dim(calib_doe(nRun = 1, nCalibCurvesPerRun = 2, nrepCalib = 1, ConcVect = c(0)))[1],
2)
expect_equal(dim(calib_doe(nRun = 1, nCalibCurvesPerRun = 1, nrepCalib = 4, ConcVect = c(0)))[1],
4)
expect_equal(dim(calib_doe(nRun = 1, nCalibCurvesPerRun = 1, nrepCalib = 1, ConcVect = c(0, 100, 200)))[1],
3)
expect_equal(dim(calib_doe(nRun = 2, nCalibCurvesPerRun = 3, nrepCalib = 5, ConcVect = c(0, 50, 100,
125, 150, 175, 200)))[1], 210)
expect_equal(dim(calib_doe(nRun = 2, nCalibCurvesPerRun = 3, nrepCalib = 5, ConcVect = c(0, 50, 100,
125, 150, 175, 200)))[2], 6)
})
devtools::document()
devtools::document()
library(anaval)
library(anaval)
devtools::use_travis()
library(anaval)
install.packages(c("cluster", "codetools", "foreign", "lattice", "Matrix", "mgcv", "nlme", "survival"), lib="C:/Users/nicdubois/Documents/R project/anaval/packrat/lib-R")
formatR::tidy_dir("C:\Users\nicdubois\Documents\R project", recursive = TRUE)
install.packages('formatR')
formatR::tidy_dir("C:\Users\nicdubois\Documents\R project", recursive = TRUE)
formatR::tidy_dir("C:\Users\nicdubois\Documents\R project", recursive = TRUE)
formatR::tidy_dir(recursive = TRUE)
formatR::tidy_dir(recursive = TRUE)
formatR::tidy_dir(recursive = TRUE)
packrat::snapshot(prompt = FALSE)
data(anaval)
data("ref_calib_doe")
ls()
test_doe = calib_doe(nRun = 2, nCalibCurvesPerRun = 3, nrepCalib = 5, ConcVect = c(0, 50, 100, 125, 150, 175, 200))
library(anaval)
data("ref_calib_doe")
test_doe = calib_doe(nRun = 2, nCalibCurvesPerRun = 3, nrepCalib = 5, ConcVect = c(0, 50, 100, 125, 150, 175, 200))
expect_equal_to_reference(test_doe, ref_calib_doe.rds)
library(anaval)
test_doe = calib_doe(nRun = 2, nCalibCurvesPerRun = 3, nrepCalib = 5, ConcVect = c(0, 50, 100, 125, 150, 175, 200))
test_doe
?expect_equal_to_reference
?testthat::expect_equal_to_reference
library(anaval)
?norm_lin _dataset_sim
library(anaval)
?norm_lin _dataset_sim
devtools::document()
?norm_lin _dataset_sim
?norm_lin_dataset_sim
library(anaval)
library(anaval)
data(ref_calib_doe)
ref_calib_doe
ref_sim_tot_var = calib_doe(nRun = 100000, nCalibCurvesPerRun = 1, nrepCalib = 1, ConcVect = c(10))
tools::checkRdaFiles(ref_sim_tot_var)
ref_sim_tot_var[1,]
?checkRdaFiles
save(ref_sim_tot_var)
save(ref_sim_tot_var,'ref_sim_tot_var')
devtools::use_data(ref_sim_tot_var,'ref_sim_tot_var')
devtools::use_data(ref_sim_tot_var)
tools::checkRdaFiles(ref_sim_tot_var)
devtools::checkRdaFiles(ref_sim_tot_var)
tools::checkRdaFiles()
tools::checkRdaFiles(ref_sim_tot_var)
rownames(ref_sim_tot_var)
ref_sim1 <- norm_lin_dataset_sim(ref_sim_tot_var)
ref_sim1
ref_sim1 <- norm_lin_dataset_sim(ref_sim_tot_var, intercept = 1, slope = 1, SDrun = 1.5, SDrep = 3, biais = 0)[, "Response"]
ref_sim1
ref_sim1 <- norm_lin_dataset_sim(ref_sim_tot_var, intercept = 1, slope = 1, SDrun = 1.5, SDrep = 3, biais = 0)[, "Response"]
ref_sim1_var <- var(linear_link_inv(intercept = 1, slope = 1, as.numeric(ref_sim1)))
ref_sim1_var
ref_sim1 <- norm_lin_dataset_sim(ref_sim_tot_var, intercept = 1, slope = 1, SDrun = 1.5, SDrep = 3, biais = 0)[, "Response"]
ref_sim1_var <- var(linear_link_inv(intercept = 1, slope = 1, as.numeric(ref_sim1)))
expect_that((ref_sim1_var - 11.25)/11.25 * 100 < 2.5, is_true())
rm(ref_sim1,ref_sim1_var)
ref_sim1
ref_sim2 <- norm_lin_dataset_sim(ref_sim_tot_var, intercept = 1, slope = 1, SDrun = 1.5, SDrep = 3, biais = 0)[, "Response"]
ref_sim2_var <- var(linear_link_inv(intercept = 1, slope = 1, as.numeric(ref_sim2)))
expect_that((ref_sim2_var - 11.25)/11.25 * 100 < 2.5, is_true())
ref_sim2 <- norm_lin_dataset_sim(ref_sim_tot_var, intercept = 1, slope = 1, SDrun = 1.5, SDrep = 3, biais = 0)[, "Response"]
ref_sim2_var <- var(linear_link_inv(intercept = 1, slope = 1, as.numeric(ref_sim2)))
expect_that((ref_sim2_var - 11.25)/11.25 * 100 < 2.5, is_true())
ref_sim2 <- norm_lin_dataset_sim(ref_sim_tot_var, intercept = 1, slope = 1, SDrun = 1.5, SDrep = 3, biais = 0)[, "Response"]
ref_sim2_var <- var(linear_link_inv(intercept = 1, slope = 1, as.numeric(ref_sim2)))
expect_that((ref_sim2_var - 11.25)/11.25 * 100 < 2.5, is_true())
ref_sim2 <- norm_lin_dataset_sim(ref_sim_tot_var, intercept = 1, slope = 1, SDrun = 10, SDrep = 10, biais = 0)[, "Response"]
ref_sim2_var <- var(linear_link_inv(intercept = 1, slope = 1, as.numeric(ref_sim2)))
expect_that((ref_sim2_var - 200)/200 * 100 < 2.5, is_true())
rm(ref_sim2,ref_sim2_var)
ref_sim2_var
ref_sim2 <- norm_lin_dataset_sim(ref_sim_tot_var, intercept = 1, slope = 1, SDrun = 10, SDrep = 10, biais = 0)[, "Response"]
ref_sim2_var <- var(linear_link_inv(intercept = 1, slope = 1, as.numeric(ref_sim2)))
expect_that((ref_sim2_var - 200)/200 * 100 < 2.5, is_true())
ref_sim2_var
ref_sim4 <- norm_lin_dataset_sim(ref_sim_tot_var, intercept = 1, slope = 1, SDrun = 1.5, SDrep = 3, biais = 0)[, "Response"]
ref_sim4_var <- var(linear_link_inv(intercept = 1, slope = 1, as.numeric(ref_sim4)))
expect_that((ref_sim4_var - 100)/100 * 100 < 2.5, is_true())
library(anaval)
library(anaval)
library(anaval)
library(anaval)
library(anaval)
library(anaval)
data(ref_calib_doe)
ref_calib_doe
ref_calib_doe[1,]
dim(ref_calib_doe)
calib_doe
data(calib_doe)
data("ref_calib_doe")
dim(ref_calib_doe)
ref_calib_doe[1,]
dim(ref_sim_tot_var)
ref_sim_tot_var[1,]
ref_sim_tot_var[1,1:5]
ref_sim_tot_var[1:5,]
?ref_sim_tot_var
library(anaval)
?ref_sim_tot_var
plot(test_doe)
data(test_doe)
data("ref_calib_doe")
test_doe = calib_doe(nRun = 2, nCalibCurvesPerRun = 3, nrepCalib = 5, ConcVect = c(0, 50, 100, 125, 150, 175, 200))
expect_equal(test_doe, ref_calib_doe)
test_doe = calib_doe(nRun = 2, nCalibCurvesPerRun = 3, nrepCalib = 5, ConcVect = c(0, 50, 100, 125, 150, 175, 200))
test_doe
ref_sim4 <- norm_lin_dataset_sim(ref_sim_tot_var, intercept = 1, slope = 1, SDrun = 1, SDrep = 1, biais = 10)[, "Response"]
ref_sim4_avg <- mean(linear_link_inv(intercept = 1, slope = 1, as.numeric(ref_sim4)))
ref_sim4 <- norm_lin_dataset_sim(ref_sim_tot_var, intercept = 1, slope = 1, SDrun = 1, SDrep = 1, biais = 10)[, "Response"]
ref_sim4_avg <- mean(linear_link_inv(intercept = 1, slope = 1, as.numeric(ref_sim4)))
ref_sim4_avg
?ref_sim_tot_var
ref_sim4_avg
ref_sim4_avg-10
(ref_sim4_avg-10)/10
library(anaval)
?norm_lin_dataset_sim
?calib_doe
calib_doe(nRun = 3, nCalibCurvesPerRun = 2, nrepCalib = 3,
ConcVect = c(0, 50, 100, 125, 150, 175, 200))
myDOE =calib_doe(nRun = 3, nCalibCurvesPerRun = 2, nrepCalib = 3,
ConcVect = c(0, 50, 100, 125, 150, 175, 200))
?norm_lin_dataset_sim
myCalibData = norm_lin_dataset_sim(MyDOE, intercept = 0, slope = 1, SDrun = 10,
SDrep = 10, biais = 0)
myCalibData = norm_lin_dataset_sim(myDOE, intercept = 0, slope = 1, SDrun = 10,
SDrep = 10, biais = 0)
myCalibData
?calib_coef
?calib_coef
library(anaval)
?calib_coef
?calib_coef
?anava::calib_coef
?anaval::calib_coef
calib_coef
?calib_coef
devtools::load_all(".")
?linear_link
?calib_coef
?calib_doe
?calib_doe
?CalibFixedCoefEst
?CalibFixedCoefEst
?calib_coef
library(anaval)
?calib_doe
?calib_coef
?calib_coef
library(anaval)
?calib_coef
library(anaval)
?calib_coef
?calib_doe
library(anaval)
library(anaval)
?calib_doe
library(anaval)
?calib_coef
??calib_coef
devtools::session_info()
install.packages("roxygen2")
devtools::session_info()
library('roxygen2')
devtools::document()
devtools::document()
?calib_coef
RespCalib = calib_coef(DS = myCalibData,LowerRange=0,UpperRange=200,MyModel='lm', diagnostics='TRUE')
myDOE =calib_doe(nRun = 3, nCalibCurvesPerRun = 2, nrepCalib = 3,
ConcVect = c(0, 50, 100, 125, 150, 175, 200))
myCalibData = norm_lin_dataset_sim(myDOE, intercept = 0, slope = 1, SDrun = 10,
SDrep = 10, biais = 0)
RespCalib = calib_coef(DS = myCalibData,LowerRange=0,UpperRange=200,MyModel='lm', diagnostics='TRUE')
RespCalib
devtools::use_data(myCalibData,calib_data)
calib_data = norm_lin_dataset_sim(myDOE, intercept = 0, slope = 1, SDrun = 10,
SDrep = 10, biais = 0)
devtools::use_data(myCalibData,calib_data)
myDOE =calib_doe(nRun = 3, nCalibCurvesPerRun = 2, nrepCalib = 3,
ConcVect = c(0, 50, 100, 125, 150, 175, 200))
calib_data = norm_lin_dataset_sim(myDOE, intercept = 0, slope = 1, SDrun = 10,
SDrep = 10, biais = 0)
devtools::use_data(myCalibData,calib_data)
devtools::use_data(calib_data,calib_data)
RespCalib = calib_coef(DS = calib_data,LowerRange=0,UpperRange=200,MyModel='lm', diagnostics='TRUE')
RespCalib
devtools::document()
calib_data
dim(calib_data)
calib_data[1,]
devtools::document()
str(RespCalib)
RespCalib$FixedEffectEst
RespCalib$FixedEffectEst$estInt
RespCalib$FixedEffectEst['estInt']
mySlope = RespCalib$FixedEffectEst['estSlope']
myIntercept = RespCalib$FixedEffectEst['estInt']
calib_data = norm_lin_dataset_sim(myDOE, intercept = 0, slope = 1, SDrun = 0.5,
SDrep = 0.5, biais = 0)
devtools::use_data(calib_data,calib_data)
devtools::use_data(calib_data,calib_data, overwrite = TRUE)
data("calib_data")
RespCalib = calib_coef(DS = calib_data,LowerRange=0,UpperRange=200,MyModel='lm', diagnostics='TRUE')
myIntercept = RespCalib$FixedEffectEst['estInt']
myIntercept
myDOE =calib_doe(nRun = 6, nCalibCurvesPerRun = 6, nrepCalib = 6,
ConcVect = c(0, 50, 100, 125, 150, 175, 200))
calib_data = norm_lin_dataset_sim(myDOE, intercept = 0, slope = 1, SDrun = 0.5,
SDrep = 0.5, biais = 0)
devtools::use_data(calib_data,calib_data, overwrite = TRUE)
data("calib_data")
RespCalib = calib_coef(DS = calib_data,LowerRange=0,UpperRange=200,MyModel='lm', diagnostics='TRUE')
myIntercept = RespCalib$FixedEffectEst['estInt']
myIntercept
myDOE =calib_doe(nRun = 6, nCalibCurvesPerRun = 6, nrepCalib = 6,
ConcVect = c(0, 50, 100, 125, 150, 175, 200))
calib_data = norm_lin_dataset_sim(myDOE, intercept = 0, slope = 1, SDrun = 0.3,
SDrep = 0.3, biais = 0)
devtools::use_data(calib_data,calib_data, overwrite = TRUE)
data(calib_data)
dim(calib_data)
library(anaval)
data("calib_data")
RespCalib = calib_coef(DS = calib_data,LowerRange=0,UpperRange=200,MyModel='lm', diagnostics='TRUE')
RespCalib
myIntercept
abs(myIntercept - 0)/myIntercept
