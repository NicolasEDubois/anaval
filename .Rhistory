git push -u origin master
library(anaval)
anaval::hello()
library(anaval)
devtools::test()
installpackage('devtools')
install.packages('devtools')
devtools::use_testthat()
library(anaval)
linear_link(0,2,4)
devtools::document()
library(anaval)
?linear_link
devtools::test()
library(anaval)
devtools::test()
devtools::document()
?simulation
?simulation
library(anaval)
devtools::document()
devtools::document()
library(anaval)
?norm_lin_dataset_sim
devtools::document()
library(anaval)
devtools::document()
devtools::test()
library(anaval)
devtools::test()
devtools::document()
devtoos::use_data()
devtools::use_data()
ref_calib_doe = calib_doe(nRun = 2, nCalibCurvesPerRun = 3, nrepCalib = 5, ConcVect = c(0,50, 100, 125, 150, 175, 200))
devtools::use_data(ref_calib_doe)
ref_calib_doe
class(ref_calib_doe)
dim(ref_calib_doe)
ref_calib_doe[1,]
class(1)
devtools::document()
?ref_calib_doe
devtools::test()
context("calibration")
test_that("DOE output is a data.frame", {
expect_is(calib_doe(nRun = 3, nCalibCurvesPerRun = 2, nrepCalib = 3, ConcVect = c(0, 50, 100, 125,
150, 175, 200)), "data.frame")
})
test_that("DOE data.frame has the right number of rows", {
expect_equal(dim(calib_doe(nRun = 3, nCalibCurvesPerRun = 1, nrepCalib = 1, ConcVect = c(0)))[1],
3)
expect_equal(dim(calib_doe(nRun = 1, nCalibCurvesPerRun = 2, nrepCalib = 1, ConcVect = c(0)))[1],
2)
expect_equal(dim(calib_doe(nRun = 1, nCalibCurvesPerRun = 1, nrepCalib = 4, ConcVect = c(0)))[1],
4)
expect_equal(dim(calib_doe(nRun = 1, nCalibCurvesPerRun = 1, nrepCalib = 1, ConcVect = c(0, 100, 200)))[1],
3)
expect_equal(dim(calib_doe(nRun = 2, nCalibCurvesPerRun = 3, nrepCalib = 5, ConcVect = c(0, 50, 100,
125, 150, 175, 200)))[1], 210)
expect_equal(dim(calib_doe(nRun = 2, nCalibCurvesPerRun = 3, nrepCalib = 5, ConcVect = c(0, 50, 100,
125, 150, 175, 200)))[2], 6)
})
devtools::document()
devtools::document()
library(anaval)
library(anaval)
devtools::use_travis()
library(anaval)
install.packages(c("cluster", "codetools", "foreign", "lattice", "Matrix", "mgcv", "nlme", "survival"), lib="C:/Users/nicdubois/Documents/R project/anaval/packrat/lib-R")
formatR::tidy_dir("C:\Users\nicdubois\Documents\R project", recursive = TRUE)
install.packages('formatR')
formatR::tidy_dir("C:\Users\nicdubois\Documents\R project", recursive = TRUE)
formatR::tidy_dir("C:\Users\nicdubois\Documents\R project", recursive = TRUE)
formatR::tidy_dir(recursive = TRUE)
formatR::tidy_dir(recursive = TRUE)
formatR::tidy_dir(recursive = TRUE)
